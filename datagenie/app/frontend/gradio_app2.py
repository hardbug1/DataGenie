"""
DataGenie Gradio Web Interface - Completely New Design
ÏôÑÏ†ÑÌûà ÏÉàÎ°≠Í≤å ÎîîÏûêÏù∏Îêú DataGenie Ïõπ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
"""

import gradio as gr
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from typing import Optional, Tuple, Dict, Any, List
import requests
import json
import os
from datetime import datetime
import time
import random

from .services import DataGenieAPIService, DemoDataService, HistoryService

# Î∞±ÏóîÎìú API ÏÑ§Ï†ï
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")


class DataGenieNewUI:
    """DataGenie ÏôÑÏ†ÑÌûà ÏÉàÎ°úÏö¥ Ïõπ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§"""
    
    def __init__(self):
        """UI Ï¥àÍ∏∞Ìôî"""
        self.api_service = DataGenieAPIService(API_BASE_URL)
        self.demo_service = DemoDataService()
        self.history_service = HistoryService()
        self.use_demo_mode = True
        
    def setup_interface(self) -> gr.Blocks:
        """UX Ï§ëÏã¨Ïùò ÏÉàÎ°úÏö¥ Gradio Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÏÑ§Ï†ï"""
        
        # üéØ UX ÏµúÏ†ÅÌôîÎêú ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú
        ux_optimized_css = """
        /* DataGenie UX-First Design System */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
        
        :root {
            /* UX-focused Color System */
            --primary: #6366F1;
            --primary-hover: #4F46E5;
            --secondary: #10B981;
            --accent: #F59E0B;
            --success: #059669;
            --error: #DC2626;
            --warning: #D97706;
            
            /* Semantic Colors */
            --bg-primary: #FAFBFC;
            --bg-secondary: #F8FAFC;
            --surface: #FFFFFF;
            --surface-elevated: rgba(255, 255, 255, 0.98);
            
            /* Text Hierarchy */
            --text-primary: #1E293B;
            --text-secondary: #475569;
            --text-muted: #64748B;
            --text-disabled: #94A3B8;
            
            /* Spacing Scale */
            --space-1: 0.25rem;  /* 4px */
            --space-2: 0.5rem;   /* 8px */
            --space-3: 0.75rem;  /* 12px */
            --space-4: 1rem;     /* 16px */
            --space-5: 1.25rem;  /* 20px */
            --space-6: 1.5rem;   /* 24px */
            --space-8: 2rem;     /* 32px */
            --space-10: 2.5rem;  /* 40px */
            --space-12: 3rem;    /* 48px */
            
            /* Shadow System */
            --shadow-xs: 0 1px 2px rgba(0, 0, 0, 0.05);
            --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
            --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.07);
            --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
            --shadow-xl: 0 20px 25px rgba(0, 0, 0, 0.1);
            
            /* Interactive States */
            --focus-ring: 0 0 0 3px rgba(99, 102, 241, 0.1);
            --transition-fast: 150ms ease;
            --transition-smooth: 300ms cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        /* Reset & Base */
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'Inter', system-ui, -apple-system, sans-serif !important;
            background: var(--bg-primary) !important;
            color: var(--text-primary) !important;
            line-height: 1.6 !important;
            -webkit-font-smoothing: antialiased !important;
        }
        
        /* === üéØ UX-First Layout === */
        .gradio-container {
            max-width: 1200px !important;
            margin: 0 auto !important;
            padding: var(--space-6) var(--space-4) !important;
            background: transparent !important;
            min-height: 100vh !important;
        }
        
        /* Compact Header */
        .compact-header {
            background: var(--surface) !important;
            border-radius: 16px !important;
            padding: var(--space-6) var(--space-8) !important;
            margin-bottom: var(--space-8) !important;
            box-shadow: var(--shadow-sm) !important;
            border: 1px solid #E2E8F0 !important;
            text-align: center !important;
            position: relative !important;
        }
        
        .compact-header::before {
            content: '';
            position: absolute;
            top: 0; left: 0; right: 0;
            height: 3px;
            background: linear-gradient(90deg, var(--primary), var(--secondary), var(--accent));
            border-radius: 16px 16px 0 0;
        }
        
        .brand-title {
            font-size: 2.5rem !important;
            font-weight: 700 !important;
            color: var(--primary) !important;
            margin-bottom: var(--space-2) !important;
            line-height: 1.2 !important;
        }
        
        .brand-subtitle {
            font-size: 1.125rem !important;
            color: var(--text-secondary) !important;
            font-weight: 500 !important;
        }
        
        /* === üìù Main Question Input (Hero Section) === */
        .question-hero {
            background: var(--surface) !important;
            border-radius: 20px !important;
            padding: var(--space-10) var(--space-8) !important;
            margin-bottom: var(--space-8) !important;
            box-shadow: var(--shadow-lg) !important;
            border: 2px solid #E2E8F0 !important;
            text-align: center !important;
            transition: var(--transition-smooth) !important;
            position: relative !important;
        }
        
        .question-hero:focus-within {
            border-color: var(--primary) !important;
            box-shadow: var(--shadow-lg), var(--focus-ring) !important;
            transform: translateY(-2px) !important;
        }
        
        .question-label {
            font-size: 1.5rem !important;
            font-weight: 600 !important;
            color: var(--text-primary) !important;
            margin-bottom: var(--space-6) !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            gap: var(--space-3) !important;
        }
        
        /* Enhanced Input Field */
        .main-question-input {
            font-size: 1.125rem !important;
            font-weight: 500 !important;
            padding: var(--space-6) var(--space-6) !important;
            border: 2px solid #E2E8F0 !important;
            border-radius: 16px !important;
            background: var(--bg-secondary) !important;
            color: var(--text-primary) !important;
            transition: var(--transition-smooth) !important;
            min-height: 120px !important;
            resize: none !important;
        }
        
        .main-question-input:focus {
            border-color: var(--primary) !important;
            box-shadow: var(--focus-ring) !important;
            outline: none !important;
            background: var(--surface) !important;
        }
        
        .main-question-input::placeholder {
            color: var(--text-muted) !important;
            font-size: 1rem !important;
        }
        
        /* === üöÄ Primary Action Button === */
        .action-button-container {
            text-align: center !important;
            margin: var(--space-8) 0 !important;
        }
        
        .primary-action-btn {
            background: linear-gradient(135deg, var(--primary), var(--primary-hover)) !important;
            color: white !important;
            border: none !important;
            border-radius: 50px !important;
            padding: var(--space-5) var(--space-12) !important;
            font-size: 1.25rem !important;
            font-weight: 600 !important;
            box-shadow: var(--shadow-md) !important;
            transition: var(--transition-smooth) !important;
            cursor: pointer !important;
            min-width: 200px !important;
            position: relative !important;
            overflow: hidden !important;
        }
        
        .primary-action-btn:hover {
            transform: translateY(-3px) scale(1.05) !important;
            box-shadow: var(--shadow-xl), 0 0 20px rgba(99, 102, 241, 0.4) !important;
        }
        
        .primary-action-btn:active {
            transform: translateY(-1px) scale(1.02) !important;
        }
        
        /* === ‚öôÔ∏è Collapsible Settings === */
        .settings-section {
            background: var(--surface) !important;
            border-radius: 16px !important;
            margin-bottom: var(--space-8) !important;
            box-shadow: var(--shadow-sm) !important;
            border: 1px solid #E2E8F0 !important;
            overflow: hidden !important;
            transition: var(--transition-smooth) !important;
        }
        
        .settings-header {
            padding: var(--space-5) var(--space-6) !important;
            background: var(--bg-secondary) !important;
            border-bottom: 1px solid #E2E8F0 !important;
            cursor: pointer !important;
            display: flex !important;
            align-items: center !important;
            justify-content: space-between !important;
            transition: var(--transition-fast) !important;
        }
        
        .settings-header:hover {
            background: #F1F5F9 !important;
        }
        
        .settings-title {
            font-size: 1.125rem !important;
            font-weight: 600 !important;
            color: var(--text-primary) !important;
            display: flex !important;
            align-items: center !important;
            gap: var(--space-2) !important;
        }
        
        .settings-content {
            padding: var(--space-6) !important;
        }
        
        /* === üìä Results Section === */
        .results-container {
            background: var(--surface) !important;
            border-radius: 20px !important;
            padding: var(--space-8) !important;
            margin-top: var(--space-8) !important;
            box-shadow: var(--shadow-lg) !important;
            border: 1px solid #E2E8F0 !important;
            opacity: 0 !important;
            transform: translateY(20px) !important;
            transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1) !important;
        }
        
        .results-container.visible {
            opacity: 1 !important;
            transform: translateY(0) !important;
        }
        
        .results-header {
            text-align: center !important;
            margin-bottom: var(--space-8) !important;
            padding-bottom: var(--space-6) !important;
            border-bottom: 2px solid #E2E8F0 !important;
        }
        
        .results-title {
            font-size: 1.875rem !important;
            font-weight: 700 !important;
            color: var(--text-primary) !important;
            margin-bottom: var(--space-2) !important;
        }
        
        /* === üì± Sidebar === */
        .sidebar {
            background: var(--surface) !important;
            border-radius: 16px !important;
            padding: var(--space-6) !important;
            box-shadow: var(--shadow-sm) !important;
            border: 1px solid #E2E8F0 !important;
            height: fit-content !important;
            position: sticky !important;
            top: var(--space-6) !important;
        }
        
        .sidebar-section {
            margin-bottom: var(--space-8) !important;
        }
        
        .sidebar-section:last-child {
            margin-bottom: 0 !important;
        }
        
        .sidebar-title {
            font-size: 1.125rem !important;
            font-weight: 600 !important;
            color: var(--text-primary) !important;
            margin-bottom: var(--space-4) !important;
            display: flex !important;
            align-items: center !important;
            gap: var(--space-2) !important;
        }
        
        /* === üé® Enhanced Components === */
        .gr-textbox, .gr-textarea {
            background: var(--bg-secondary) !important;
            border: 2px solid #E2E8F0 !important;
            border-radius: 12px !important;
            padding: var(--space-4) !important;
            font-size: 1rem !important;
            color: var(--text-primary) !important;
            transition: var(--transition-fast) !important;
        }
        
        .gr-textbox:focus, .gr-textarea:focus {
            border-color: var(--primary) !important;
            box-shadow: var(--focus-ring) !important;
            outline: none !important;
            background: var(--surface) !important;
        }
        
        .gr-button {
            border-radius: 12px !important;
            padding: var(--space-3) var(--space-6) !important;
            font-weight: 600 !important;
            font-size: 0.875rem !important;
            transition: var(--transition-fast) !important;
            border: 2px solid transparent !important;
            cursor: pointer !important;
        }
        
        .gr-button.gr-button-secondary {
            background: var(--surface) !important;
            color: var(--primary) !important;
            border-color: var(--primary) !important;
        }
        
        .gr-button.gr-button-secondary:hover {
            background: var(--primary) !important;
            color: white !important;
            transform: translateY(-1px) !important;
        }
        
        /* === üéØ Quick Action Buttons === */
        .quick-action {
            background: var(--bg-secondary) !important;
            border: 2px solid #E2E8F0 !important;
            border-radius: 12px !important;
            padding: var(--space-4) !important;
            margin-bottom: var(--space-3) !important;
            cursor: pointer !important;
            transition: var(--transition-fast) !important;
            text-align: left !important;
            font-weight: 500 !important;
            color: var(--text-secondary) !important;
        }
        
        .quick-action:hover {
            border-color: var(--primary) !important;
            background: var(--surface) !important;
            color: var(--primary) !important;
            transform: translateX(4px) !important;
        }
        
        /* === üìä Status & Progress === */
        .status-indicator {
            display: inline-flex !important;
            align-items: center !important;
            gap: var(--space-2) !important;
            padding: var(--space-3) var(--space-5) !important;
            border-radius: 50px !important;
            font-weight: 600 !important;
            font-size: 0.875rem !important;
            margin: var(--space-4) 0 !important;
        }
        
        .status-processing {
            background: var(--warning) !important;
            color: white !important;
            animation: pulse 2s infinite !important;
        }
        
        .status-success {
            background: var(--success) !important;
            color: white !important;
        }
        
        .status-error {
            background: var(--error) !important;
            color: white !important;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        
        /* === üè∑Ô∏è Progress Steps === */
        .progress-steps {
            display: flex !important;
            justify-content: center !important;
            margin: var(--space-8) 0 !important;
            gap: var(--space-6) !important;
        }
        
        .progress-step {
            display: flex !important;
            align-items: center !important;
            gap: var(--space-2) !important;
            padding: var(--space-2) var(--space-4) !important;
            background: #E2E8F0 !important;
            border-radius: 50px !important;
            font-size: 0.875rem !important;
            font-weight: 500 !important;
            color: var(--text-muted) !important;
            transition: var(--transition-fast) !important;
        }
        
        .progress-step.active {
            background: var(--primary) !important;
            color: white !important;
        }
        
        .progress-step.completed {
            background: var(--success) !important;
            color: white !important;
        }
        
        /* === üì± Responsive Design === */
        @media (max-width: 768px) {
            .gradio-container {
                padding: var(--space-4) var(--space-3) !important;
            }
            
            .brand-title {
                font-size: 2rem !important;
            }
            
            .question-hero {
                padding: var(--space-8) var(--space-6) !important;
            }
            
            .question-label {
                font-size: 1.25rem !important;
            }
            
            .main-question-input {
                font-size: 1rem !important;
                min-height: 100px !important;
            }
            
            .primary-action-btn {
                font-size: 1.125rem !important;
                padding: var(--space-4) var(--space-8) !important;
                min-width: 180px !important;
            }
            
            .sidebar {
                position: static !important;
                margin-top: var(--space-6) !important;
            }
        }
        
        /* === üé™ Loading & Animations === */
        .loading-dots {
            display: inline-flex !important;
            gap: 4px !important;
        }
        
        .loading-dots span {
            width: 6px !important;
            height: 6px !important;
            border-radius: 50% !important;
            background: currentColor !important;
            animation: loading-bounce 1.4s ease-in-out infinite both !important;
        }
        
        .loading-dots span:nth-child(1) { animation-delay: -0.32s !important; }
        .loading-dots span:nth-child(2) { animation-delay: -0.16s !important; }
        
        @keyframes loading-bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1); }
        }
        
        /* === ‚ôø Accessibility === */
        .sr-only {
            position: absolute !important;
            width: 1px !important;
            height: 1px !important;
            padding: 0 !important;
            margin: -1px !important;
            overflow: hidden !important;
            clip: rect(0, 0, 0, 0) !important;
            white-space: nowrap !important;
            border: 0 !important;
        }
        
        /* Focus indicators */
        *:focus {
            outline: 2px solid var(--primary) !important;
            outline-offset: 2px !important;
        }
        
        button:focus, input:focus, textarea:focus {
            outline: none !important;
        }
        """
        
        # ÏÉàÎ°úÏö¥ ÌÖåÎßà
        theme = gr.themes.Soft(
            primary_hue=gr.themes.colors.violet,
            secondary_hue=gr.themes.colors.emerald,
            neutral_hue=gr.themes.colors.slate,
            font=[gr.themes.GoogleFont("Inter"), "system-ui", "sans-serif"]
        )
        
        with gr.Blocks(
            title="üßû‚Äç‚ôÇÔ∏è DataGenie - UX Optimized AI Analytics",
            theme=theme,
            css=ux_optimized_css
        ) as app:
            
            # ÏÉÅÌÉú Î≥ÄÏàò
            session_state = gr.State({})
            current_step = gr.State(1)
            
            # üéØ Compact Header
            with gr.Row():
                gr.HTML("""
                <div class="compact-header">
                    <h1 class="brand-title">üßû‚Äç‚ôÇÔ∏è DataGenie</h1>
                    <p class="brand-subtitle">AI Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù, 3Ï¥àÎßåÏóê ÏãúÏûëÌïòÏÑ∏Ïöî</p>
                </div>
                """)
            
            # üè∑Ô∏è Progress Steps
            with gr.Row():
                gr.HTML("""
                <div class="progress-steps">
                    <div class="progress-step active" id="step-1">
                        <span>1Ô∏è‚É£</span>
                        <span>ÏßàÎ¨∏ ÏûÖÎ†•</span>
                    </div>
                    <div class="progress-step" id="step-2">
                        <span>2Ô∏è‚É£</span>
                        <span>ÏÑ§Ï†ï</span>
                    </div>
                    <div class="progress-step" id="step-3">
                        <span>3Ô∏è‚É£</span>
                        <span>Î∂ÑÏÑù ÏôÑÎ£å</span>
                    </div>
                </div>
                """)
            
            # üìù Main Question Input (Hero)
            with gr.Row():
                with gr.Column(scale=4):
                    with gr.Group(elem_classes=["question-hero"]):
                        gr.HTML('<div class="question-label">üí¨ Î¨¥ÏóáÏùÑ Î∂ÑÏÑùÌïòÍ≥† Ïã∂ÏúºÏã†Í∞ÄÏöî?</div>')
                        
                        question_input = gr.Textbox(
                            label="",
                            placeholder="Ïòà: ÏßÄÎÇú 6Í∞úÏõî Îß§Ï∂ú ÌòÑÌô©Í≥º ÏÑ±Ïû• Ìä∏Î†åÎìúÎ•º Î∂ÑÏÑùÌï¥Ï£ºÏÑ∏Ïöî",
                            lines=3,
                            show_label=False,
                            elem_classes=["main-question-input"],
                            autofocus=True
                        )
                        
                        # Quick Examples Row
                        with gr.Row():
                            ex1_btn = gr.Button("üìà Îß§Ï∂ú ÌòÑÌô© Î∂ÑÏÑù", elem_classes=["gr-button-secondary"], size="sm")
                            ex2_btn = gr.Button("üë• Í≥†Í∞ù ÏÑ∏Î∂ÑÌôî", elem_classes=["gr-button-secondary"], size="sm")
                            ex3_btn = gr.Button("üéØ KPI ÎåÄÏãúÎ≥¥Îìú", elem_classes=["gr-button-secondary"], size="sm")
                        
                        # üöÄ Primary Action Button
                        with gr.Row():
                            gr.HTML('<div class="action-button-container">')
                            analyze_btn = gr.Button(
                                "üöÄ AI Î∂ÑÏÑù ÏãúÏûëÌïòÍ∏∞",
                                elem_classes=["primary-action-btn"],
                                size="lg",
                                variant="primary"
                            )
                            gr.HTML('</div>')
                
                # üì± Sidebar
                with gr.Column(scale=1, elem_classes=["sidebar"]):
                    # Recent Analysis
                    with gr.Group(elem_classes=["sidebar-section"]):
                        gr.HTML('<div class="sidebar-title">üìú ÏµúÍ∑º Î∂ÑÏÑù</div>')
                        history_display = gr.HTML(self._get_compact_history())
                    
                    # Quick Templates
                    with gr.Group(elem_classes=["sidebar-section"]):
                        gr.HTML('<div class="sidebar-title">‚ö° Îπ†Î•∏ ÌÖúÌîåÎ¶ø</div>')
                        
                        template1_btn = gr.Button("üìä ÏõîÍ∞Ñ Î¶¨Ìè¨Ìä∏", elem_classes=["quick-action"], size="sm")
                        template2_btn = gr.Button("üìà ÏÑ±Ïû•Î•† Î∂ÑÏÑù", elem_classes=["quick-action"], size="sm")
                        template3_btn = gr.Button("üí∞ ÏàòÏùµÏÑ± Î∂ÑÏÑù", elem_classes=["quick-action"], size="sm")
                        template4_btn = gr.Button("üîç Ìä∏Î†åÎìú Î∂ÑÏÑù", elem_classes=["quick-action"], size="sm")
            
            # ‚öôÔ∏è Collapsible Settings
            with gr.Row():
                with gr.Column(scale=4):
                    with gr.Group(elem_classes=["settings-section"]):
                        # Settings Header (Collapsible)
                        settings_toggle = gr.HTML("""
                        <div class="settings-header" onclick="toggleSettings()">
                            <div class="settings-title">
                                <span>‚öôÔ∏è</span>
                                <span>Í≥†Í∏â ÏÑ§Ï†ï</span>
                            </div>
                            <span id="settings-arrow">‚ñº</span>
                        </div>
                        """)
                        
                        # Settings Content (Initially Hidden)
                        with gr.Group(elem_classes=["settings-content"], visible=False) as settings_content:
                            with gr.Row():
                                with gr.Column():
                                    data_source = gr.Radio(
                                        choices=["üìä Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§", "üìÑ ÌååÏùº ÏóÖÎ°úÎìú"],
                                        value="üìä Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§",
                                        label="Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§"
                                    )
                                    
                                    # Database Options
                                    with gr.Group(visible=True) as db_group:
                                        db_choice = gr.Dropdown(
                                            choices=["üêò PostgreSQL - Î©îÏù∏", "üê¨ MySQL - Î∂ÑÏÑù", "üóÉÔ∏è SQLite - Î°úÏª¨"],
                                            value="üêò PostgreSQL - Î©îÏù∏",
                                            label="Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§"
                                        )
                                    
                                    # File Upload
                                    with gr.Group(visible=False) as file_group:
                                        file_upload = gr.File(
                                            label="Excel/CSV ÌååÏùº",
                                            file_types=[".xlsx", ".csv", ".json"]
                                        )
                                
                                with gr.Column():
                                    with gr.Row():
                                        auto_viz = gr.Checkbox(label="üé® ÏûêÎèô ÏãúÍ∞ÅÌôî", value=True)
                                        ai_insights = gr.Checkbox(label="üß† AI Ïù∏ÏÇ¨Ïù¥Ìä∏", value=True)
                                    
                                    analysis_depth = gr.Slider(
                                        minimum=1, maximum=5, value=3, step=1,
                                        label="Î∂ÑÏÑù ÍπäÏù¥",
                                        info="1: Îπ†Î•∏ Î∂ÑÏÑù ‚Üî 5: Ïã¨Ï∏µ Î∂ÑÏÑù"
                                    )
                with gr.Column(scale=1):
                    pass  # Sidebar space
            
            # üìä Results Section
            with gr.Row():
                with gr.Column():
                    # Status Display
                    status_display = gr.HTML(visible=False)
                    
                    # Results Container with Animation
                    with gr.Group(elem_classes=["results-container"], visible=False) as results_section:
                        with gr.Group(elem_classes=["results-header"]):
                            gr.HTML('<div class="results-title">üéØ Î∂ÑÏÑù Í≤∞Í≥º</div>')
                        
                        with gr.Tabs():
                            # AI Insights Tab
                            with gr.TabItem("üí° AI Ïù∏ÏÇ¨Ïù¥Ìä∏"):
                                insights_output = gr.Markdown(
                                    """
                                    ## üöÄ Î∂ÑÏÑùÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî!
                                    
                                    ÏúÑÏóêÏÑú ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÍ≥† **'AI Î∂ÑÏÑù ÏãúÏûëÌïòÍ∏∞'** Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥ 
                                    AIÍ∞Ä Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑùÌïòÏó¨ Ïù∏ÏÇ¨Ïù¥Ìä∏Î•º Ï†úÍ≥µÌï©ÎãàÎã§.
                                    
                                    ### üí° ÏòàÏãú ÏßàÎ¨∏Îì§:
                                    - "ÏßÄÎÇú 6Í∞úÏõî Îß§Ï∂ú Ìä∏Î†åÎìúÎäî Ïñ¥ÎñªÍ≤å ÎêòÎÇòÏöî?"
                                    - "Í≥†Í∞ùÏùÑ Íµ¨Îß§ Ìå®ÌÑ¥Î≥ÑÎ°ú Î∂ÑÎ•òÌï¥Ï£ºÏÑ∏Ïöî"
                                    - "Ïñ¥Îñ§ Ï†úÌíàÏù¥ Í∞ÄÏû• ÏàòÏùµÏÑ±Ïù¥ ÎÜíÏùÄÍ∞ÄÏöî?"
                                    """
                                )
                            
                            # Visualization Tab
                            with gr.TabItem("üìà ÏãúÍ∞ÅÌôî"):
                                chart_output = gr.Plot(
                                    label="Ïù∏ÌÑ∞ÎûôÌã∞Î∏å Ï∞®Ìä∏"
                                )
                            
                            # Data Tab
                            with gr.TabItem("üìã Îç∞Ïù¥ÌÑ∞"):
                                data_output = gr.Dataframe(
                                    label="ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞",
                                    interactive=True,
                                    wrap=True
                                )
                            
                            # Query Tab
                            with gr.TabItem("üîç Ïã§Ìñâ ÏΩîÎìú"):
                                query_output = gr.Code(
                                    label="ÏÉùÏÑ±Îêú SQL/Python ÏΩîÎìú",
                                    language="sql"
                                )
            
            # JavaScript for Settings Toggle
            gr.HTML("""
            <script>
            function toggleSettings() {
                const content = document.querySelector('.settings-content');
                const arrow = document.getElementById('settings-arrow');
                
                if (content.style.display === 'none' || !content.style.display) {
                    content.style.display = 'block';
                    arrow.textContent = '‚ñ≤';
                } else {
                    content.style.display = 'none';
                    arrow.textContent = '‚ñº';
                }
            }
            
            // Auto-focus on question input
            window.addEventListener('load', function() {
                const questionInput = document.querySelector('.main-question-input textarea');
                if (questionInput) {
                    questionInput.focus();
                }
            });
            </script>
            """)
            
            # Event Handlers
            
            # Example buttons
            ex1_btn.click(
                lambda: "ÏßÄÎÇú 6Í∞úÏõîÍ∞Ñ Îß§Ï∂ú ÌòÑÌô©Í≥º Ìä∏Î†åÎìúÎ•º Î∂ÑÏÑùÌï¥Ï£ºÏÑ∏Ïöî",
                outputs=question_input
            )
            ex2_btn.click(
                lambda: "Í≥†Í∞ùÏùÑ Íµ¨Îß§ Ìå®ÌÑ¥Î≥ÑÎ°ú ÏÑ∏Î∂ÑÌôîÌïòÍ≥† Í∞Å Í∑∏Î£πÏùò ÌäπÏÑ±ÏùÑ Î∂ÑÏÑùÌï¥Ï£ºÏÑ∏Ïöî",
                outputs=question_input
            )
            ex3_btn.click(
                lambda: "ÌïµÏã¨ ÏÑ±Í≥º ÏßÄÌëú(KPI)Î•º ÎåÄÏãúÎ≥¥Îìú ÌòïÌÉúÎ°ú Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî",
                outputs=question_input
            )
            
            # Template buttons
            template1_btn.click(
                lambda: "Ïù¥Î≤à Îã¨ Ï†ÑÏ≤¥ ÎπÑÏ¶àÎãàÏä§ ÏÑ±Í≥ºÎ•º Ï¢ÖÌï©Ìïú ÏõîÍ∞Ñ Î¶¨Ìè¨Ìä∏Î•º ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî",
                outputs=question_input
            )
            template2_btn.click(
                lambda: "Ï†ÑÎÖÑ ÎèôÍ∏∞ ÎåÄÎπÑ ÏÑ±Ïû•Î•†Í≥º ÏÑ±Ïû• ÎèôÎ†•ÏùÑ Î∂ÑÏÑùÌï¥Ï£ºÏÑ∏Ïöî",
                outputs=question_input
            )
            template3_btn.click(
                lambda: "Ï†úÌíàÎ≥Ñ, ÏßÄÏó≠Î≥Ñ ÏàòÏùµÏÑ±ÏùÑ Î∂ÑÏÑùÌïòÍ≥† Í∞úÏÑ† Î∞©ÏïàÏùÑ Ï†úÏãúÌï¥Ï£ºÏÑ∏Ïöî",
                outputs=question_input
            )
            
            # Data source toggle
            def toggle_data_source(source):
                if source == "üìä Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§":
                    return gr.update(visible=True), gr.update(visible=False)
                else:
                    return gr.update(visible=False), gr.update(visible=True)
            
            data_source.change(
                toggle_data_source,
                inputs=data_source,
                outputs=[db_group, file_group]
            )
            
            # Main analyze button
            analyze_btn.click(
                self.process_analysis,
                inputs=[
                    question_input, data_source, db_choice, file_upload,
                    auto_viz, ai_insights, analysis_depth, session_state
                ],
                outputs=[
                    status_display, results_section, insights_output,
                    chart_output, data_output, query_output, session_state
                ]
            )
        
        return app
    
    def process_analysis(self, question, data_source, db_choice, file_upload, 
                        auto_viz, ai_insights, depth, session_state):
        """UX ÏµúÏ†ÅÌôîÎêú Î∂ÑÏÑù Ï≤òÎ¶¨"""
        
        if not question.strip():
            return (
                gr.HTML('''
                <div class="status-indicator status-error">
                    ‚ùå ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî
                </div>
                ''', visible=True),
                gr.update(visible=False),
                "## ‚ùå ÏßàÎ¨∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§\n\nÎ∂ÑÏÑùÏùÑ ÏúÑÌï¥ ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.",
                None, pd.DataFrame(), "", session_state
            )
        
        try:
            # Step 1: ÏßàÎ¨∏ Î∂ÑÏÑù Ï§ë
            status_html = gr.HTML('''
            <div class="status-indicator status-processing">
                üîç ÏßàÎ¨∏ÏùÑ Î∂ÑÏÑùÌïòÎäî Ï§ëÏûÖÎãàÎã§
                <div class="loading-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
            ''', visible=True)
            
            time.sleep(1)
            
            # Step 2: Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ï§ë
            status_html = gr.HTML('''
            <div class="status-indicator status-processing">
                üîÑ AIÍ∞Ä Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑùÌïòÎäî Ï§ëÏûÖÎãàÎã§
                <div class="loading-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
            ''', visible=True)
            
            time.sleep(2)
            
            # Generate demo results
            insights, chart, data, query = self._generate_demo_results(question, depth)
            
            # Update session
            analysis_id = f"analysis_{int(time.time())}"
            session_state[analysis_id] = {
                "question": question,
                "timestamp": datetime.now().isoformat(),
                "status": "completed",
                "depth": depth
            }
            
            # Add to history
            self.history_service.add_question(question, True, {
                "analysis_id": analysis_id,
                "depth": depth,
                "data_source": data_source
            })
            
            return (
                gr.HTML('''
                <div class="status-indicator status-success">
                    ‚úÖ Î∂ÑÏÑùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!
                </div>
                ''', visible=True),
                gr.update(visible=True, elem_classes=["results-container", "visible"]),
                insights, chart, data, query, session_state
            )
            
        except Exception as e:
            return (
                gr.HTML(f'''
                <div class="status-indicator status-error">
                    ‚ùå Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}
                </div>
                ''', visible=True),
                gr.update(visible=True),
                f"## ‚ùå Î∂ÑÏÑù Ïò§Î•ò\n\n{str(e)}\n\nÎã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
                None, pd.DataFrame(), "", session_state
            )
    
    def _generate_demo_results(self, question, depth):
        """Îç∞Î™® Í≤∞Í≥º ÏÉùÏÑ±"""
        
        # Generate insights based on question type
        if "Îß§Ï∂ú" in question or "revenue" in question.lower():
            insights = self._generate_sales_insights(depth)
            chart = self._create_sales_chart()
            data = self._create_sales_data()
            query = "SELECT DATE_TRUNC('month', order_date) as month, SUM(amount) as revenue FROM orders GROUP BY month;"
        
        elif "Í≥†Í∞ù" in question or "customer" in question.lower():
            insights = self._generate_customer_insights(depth)
            chart = self._create_customer_chart()
            data = self._create_customer_data()
            query = "SELECT segment, COUNT(*) as customers, AVG(purchase_amount) as avg_purchase FROM customer_segments GROUP BY segment;"
        
        else:
            insights = self._generate_general_insights(depth)
            chart = self._create_general_chart()
            data = self._create_general_data()
            query = "SELECT category, value FROM analysis_data ORDER BY value DESC;"
        
        return insights, chart, data, query
    
    def _generate_sales_insights(self, depth):
        """Îß§Ï∂ú Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±"""
        base = """# üìà Îß§Ï∂ú Î∂ÑÏÑù Í≤∞Í≥º

## üîç ÌïµÏã¨ Î∞úÍ≤¨ÏÇ¨Ìï≠
- **Ï¥ù Îß§Ï∂ú**: 8.97ÏñµÏõê (Ï†ÑÎÖÑ ÎåÄÎπÑ +15.3%)
- **ÏõîÌèâÍ∑† ÏÑ±Ïû•Î•†**: 8.2%
- **ÏµúÍ≥† ÏÑ±Ïû•Ïõî**: 4Ïõî (+23.1%)

## üí° Ï£ºÏöî Ïù∏ÏÇ¨Ïù¥Ìä∏
1. **Íæ∏Ï§ÄÌïú ÏÉÅÏäπÏÑ∏**: 6Í∞úÏõî Ïó∞ÏÜç ÏÑ±Ïû• Í∏∞Î°ù
2. **Í≥ÑÏ†àÏÑ± Ìö®Í≥º**: Î¥ÑÏ≤† Îß§Ï∂ú Ï¶ùÍ∞Ä Ìå®ÌÑ¥ ÌôïÏù∏
3. **ÏÑ±Ïû• ÎèôÎ†•**: Ïã†Í∑ú Í≥†Í∞ù Ïú†ÏûÖÏù¥ Ï£ºÏöî ÎèôÎ†•

## üéØ Í∂åÏû•ÏÇ¨Ìï≠
- 4Ïõî ÏÑ±Í≥µ ÏöîÏù∏ÏùÑ Îã§Î•∏ ÏõîÏóê Ï†ÅÏö©
- Í≥ÑÏ†àÏÑ±ÏùÑ ÌôúÏö©Ìïú ÎßàÏºÄÌåÖ Ï†ÑÎûµ ÏàòÎ¶Ω
- Ïã†Í∑ú Í≥†Í∞ù Ïú†ÏûÖ Ï±ÑÎÑê ÌôïÎåÄ
"""
        
        if depth >= 4:
            base += """

## üî¨ Ïã¨Ï∏µ Î∂ÑÏÑù
### üìä ÌÜµÍ≥ÑÏ†Å ÏßÄÌëú
- **Î≥ÄÎèôÍ≥ÑÏàò**: 0.12 (ÏïàÏ†ïÏ†Å)
- **ÏÉÅÍ¥ÄÍ≥ÑÏàò**: 0.89 (Í∞ïÌïú ÏñëÏùò ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ)
- **ÏòàÏ∏° Ïã†Î¢∞ÎèÑ**: 94.2%

### üéØ ÏòàÏ∏° Í≤∞Í≥º
- **Îã§Ïùå Îã¨ ÏòàÏÉÅ Îß§Ï∂ú**: 1.85ÏñµÏõê (¬±5%)
- **Î∂ÑÍ∏∞ Î™©Ìëú Îã¨ÏÑ±Î•†**: 103.7% ÏòàÏÉÅ
"""
        
        return base
    
    def _generate_customer_insights(self, depth):
        """Í≥†Í∞ù Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±"""
        return """# üë• Í≥†Í∞ù ÏÑ∏Î∂ÑÌôî Î∂ÑÏÑù

## üîç Í≥†Í∞ù Íµ¨ÏÑ±
- **Ï¥ù Í≥†Í∞ùÏàò**: 12,450Î™Ö
- **VIP Í≥†Í∞ù**: 8.3% (Îß§Ï∂ú Í∏∞Ïó¨ÎèÑ 42%)
- **Ïã†Í∑ú Í≥†Í∞ù**: 23.7% (ÏßÄÏÜç Ï¶ùÍ∞Ä Ï∂îÏÑ∏)

## üí° ÏÑ∏Í∑∏Î®ºÌä∏Î≥Ñ ÌäπÏÑ±
1. **VIP Í≥†Í∞ù**: ÎÜíÏùÄ Ï∂©ÏÑ±ÎèÑ, ÌîÑÎ¶¨ÎØ∏ÏóÑ Ï†úÌíà ÏÑ†Ìò∏
2. **ÏùºÎ∞ò Í≥†Í∞ù**: Í∞ÄÍ≤© ÎØºÍ∞ê, ÌîÑÎ°úÎ™®ÏÖò Î∞òÏùë ÎÜíÏùå
3. **Ïã†Í∑ú Í≥†Í∞ù**: Ï≤´ Íµ¨Îß§ ÌõÑ Ïû¨Íµ¨Îß§Ïú® 67%

## üéØ ÎßàÏºÄÌåÖ Ï†ÑÎûµ
- VIP Í≥†Í∞ù: Í∞úÏù∏ÌôîÎêú ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏÑúÎπÑÏä§
- ÏùºÎ∞ò Í≥†Í∞ù: ÌÉÄÍ≤ü ÌîÑÎ°úÎ™®ÏÖò Í∞ïÌôî
- Ïã†Í∑ú Í≥†Í∞ù: Ïò®Î≥¥Îî© ÌîÑÎ°úÍ∑∏Îû® Í∞úÏÑ†
"""
    
    def _generate_general_insights(self, depth):
        """ÏùºÎ∞ò Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±"""
        return """# üìä Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Í≤∞Í≥º

## üîç Î∂ÑÏÑù Í∞úÏöî
Îç∞Ïù¥ÌÑ∞Ïùò Ìå®ÌÑ¥Í≥º Ìä∏Î†åÎìúÎ•º Ï¢ÖÌï©Ï†ÅÏúºÎ°ú Î∂ÑÏÑùÌñàÏäµÎãàÎã§.

## üí° Ï£ºÏöî Î∞úÍ≤¨ÏÇ¨Ìï≠
1. **Îç∞Ïù¥ÌÑ∞ Î∂ÑÌè¨**: ÏÉÅÏúÑ 20%Í∞Ä Ï†ÑÏ≤¥Ïùò 80% Ï∞®ÏßÄ
2. **ÏÑ±Ïû• Ìå®ÌÑ¥**: ÏßÄÏÜçÏ†ÅÏù∏ ÏÉÅÏäπ Ï∂îÏÑ∏
3. **Î≥ÄÎèôÏÑ±**: ÏïàÏ†ïÏ†ÅÏù∏ ÏÑ±Ïû• Ìå®ÌÑ¥ Ïú†ÏßÄ

## üéØ Í∞úÏÑ† Î∞©Ïïà
- ÏÉÅÏúÑ Ìï≠Î™©Ïùò ÏÑ±Í≥µ ÏöîÏù∏ Î∂ÑÏÑù
- ÌïòÏúÑ Ìï≠Î™©Ïùò Í∞úÏÑ† Í∏∞Ìöå Î∞úÍµ¥
- Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÏùòÏÇ¨Í≤∞Ï†ï Í∞ïÌôî
"""
    
    def _create_sales_chart(self):
        """Îß§Ï∂ú Ï∞®Ìä∏ ÏÉùÏÑ±"""
        months = ['2024-01', '2024-02', '2024-03', '2024-04', '2024-05', '2024-06']
        revenue = [120, 135, 148, 182, 167, 195]
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=months, y=revenue,
            mode='lines+markers',
            name='ÏõîÎ≥Ñ Îß§Ï∂ú',
            line=dict(color='#6366F1', width=3),
            marker=dict(size=10, color='#6366F1')
        ))
        
        fig.update_layout(
            title='üìà ÏõîÎ≥Ñ Îß§Ï∂ú ÌòÑÌô©',
            xaxis_title='Ïõî',
            yaxis_title='Îß§Ï∂ú (Î∞±ÎßåÏõê)',
            template='plotly_white',
            height=400
        )
        
        return fig
    
    def _create_customer_chart(self):
        """Í≥†Í∞ù Ï∞®Ìä∏ ÏÉùÏÑ±"""
        segments = ['VIP', 'ÏùºÎ∞ò', 'Ïã†Í∑ú', 'Ìú¥Î©¥']
        counts = [1033, 6225, 2947, 2245]
        
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=segments, y=counts,
            marker=dict(color=['#6366F1', '#10B981', '#F59E0B', '#EF4444'])
        ))
        
        fig.update_layout(
            title='üë• Í≥†Í∞ù ÏÑ∏Í∑∏Î®ºÌä∏Î≥Ñ Î∂ÑÌè¨',
            xaxis_title='Í≥†Í∞ù ÏÑ∏Í∑∏Î®ºÌä∏',
            yaxis_title='Í≥†Í∞ùÏàò',
            template='plotly_white',
            height=400
        )
        
        return fig
    
    def _create_general_chart(self):
        """ÏùºÎ∞ò Ï∞®Ìä∏ ÏÉùÏÑ±"""
        categories = ['A', 'B', 'C', 'D', 'E']
        values = [45, 32, 28, 15, 12]
        
        fig = go.Figure()
        fig.add_trace(go.Pie(
            labels=categories, values=values,
            hole=0.3,
            marker=dict(colors=['#6366F1', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'])
        ))
        
        fig.update_layout(
            title='üìä Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÌè¨',
            template='plotly_white',
            height=400
        )
        
        return fig
    
    def _create_sales_data(self):
        """Îß§Ï∂ú Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
        return pd.DataFrame({
            'Ïõî': ['2024-01', '2024-02', '2024-03', '2024-04', '2024-05', '2024-06'],
            'Îß§Ï∂ú(Î∞±ÎßåÏõê)': [120, 135, 148, 182, 167, 195],
            'ÏÑ±Ïû•Î•†(%)': [0, 12.5, 9.6, 23.0, -8.2, 16.8],
            'Î™©ÌëúÎåÄÎπÑ(%)': [95.2, 102.3, 108.1, 121.3, 111.8, 118.5]
        })
    
    def _create_customer_data(self):
        """Í≥†Í∞ù Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
        return pd.DataFrame({
            'ÏÑ∏Í∑∏Î®ºÌä∏': ['VIP', 'ÏùºÎ∞ò', 'Ïã†Í∑ú', 'Ìú¥Î©¥'],
            'Í≥†Í∞ùÏàò': [1033, 6225, 2947, 2245],
            'ÌèâÍ∑†Íµ¨Îß§Ïï°(ÎßåÏõê)': [45.2, 12.8, 8.3, 3.1],
            'Ïû¨Íµ¨Îß§Ïú®(%)': [89.5, 67.2, 34.8, 12.1]
        })
    
    def _create_general_data(self):
        """ÏùºÎ∞ò Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
        return pd.DataFrame({
            'Ïπ¥ÌÖåÍ≥†Î¶¨': ['A', 'B', 'C', 'D', 'E'],
            'Í∞í': [450, 320, 280, 150, 120],
            'ÎπÑÏú®(%)': [33.6, 23.9, 20.9, 11.2, 9.0],
            'ÏàúÏúÑ': [1, 2, 3, 4, 5]
        })
    
    def _get_compact_history(self):
        """Ïª¥Ìå©Ìä∏Ìïú ÏÇ¨Ïù¥ÎìúÎ∞î Ïù¥Î†• ÏÉùÏÑ±"""
        history_items = [
            {"q": "Îß§Ï∂ú Î∂ÑÏÑù", "time": "2Î∂Ñ Ï†Ñ"},
            {"q": "Í≥†Í∞ù ÏÑ∏Î∂ÑÌôî", "time": "15Î∂Ñ Ï†Ñ"},
            {"q": "ROI Î∂ÑÏÑù", "time": "1ÏãúÍ∞Ñ Ï†Ñ"},
        ]
        
        html = ""
        for item in history_items:
            html += f"""
            <div style="background: #F8FAFC; border: 1px solid #E2E8F0; border-radius: 8px; padding: 0.75rem; margin-bottom: 0.5rem; cursor: pointer; transition: all 0.15s ease;">
                <div style="font-weight: 600; color: #1E293B; font-size: 0.875rem; margin-bottom: 0.25rem;">
                    {item['q']}
                </div>
                <div style="font-size: 0.75rem; color: #64748B;">
                    {item['time']}
                </div>
            </div>
            """
        
        return html if html else "<div style='text-align: center; color: #9CA3AF; padding: 1rem; font-size: 0.875rem;'>Î∂ÑÏÑù Ïù¥Î†•Ïù¥ ÏóÜÏäµÎãàÎã§</div>"
    
    def _get_demo_history(self):
        """Îç∞Î™® Ïù¥Î†• ÏÉùÏÑ±"""
        history_items = [
            {"q": "Îß§Ï∂ú Ìä∏Î†åÎìú Î∂ÑÏÑù", "time": "2Î∂Ñ Ï†Ñ", "status": "ÏôÑÎ£å"},
            {"q": "Í≥†Í∞ù ÏÑ∏Î∂ÑÌôî", "time": "15Î∂Ñ Ï†Ñ", "status": "ÏôÑÎ£å"},
            {"q": "Ï†úÌíà ÏàòÏùµÏÑ±", "time": "1ÏãúÍ∞Ñ Ï†Ñ", "status": "ÏôÑÎ£å"},
        ]
        
        html = ""
        for item in history_items:
            html += f"""
            <div style="background: white; border: 1px solid #E5E7EB; border-radius: 12px; padding: 1rem; margin-bottom: 0.75rem;">
                <div style="font-weight: 600; color: #1F2937; margin-bottom: 0.25rem; font-size: 0.9rem;">
                    {item['q']}
                </div>
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <small style="color: #6B7280;">{item['time']}</small>
                    <span style="background: #10B981; color: white; padding: 0.25rem 0.5rem; border-radius: 6px; font-size: 0.75rem;">
                        {item['status']}
                    </span>
                </div>
            </div>
            """
        
        return html


def create_app() -> gr.Blocks:
    """ÏÉàÎ°úÏö¥ Gradio Ïï± ÏÉùÏÑ±"""
    ui = DataGenieNewUI()
    return ui.setup_interface()


if __name__ == "__main__":
    app = create_app()
    app.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        debug=True
    )
